package views

import "github.com/mjefferson-whs/listener/internal/data"

templ ConfigPage(config []data.ConfigEntry, u *data.User) {
  @Authenticated(u) {
    // <h2 class="header">Config Page</h2>

    // TODO: If possible, split into two sections - one for checkboxes to turn on/off data types for the listener service, another for manual inputs such as username
    <table class="config-table">
      <thead>
        <tr>
          <th>Key</th>
          <th>Value</th>
          <th>Updated At</th>
          // Aesthetically looks better without this header - consider other approaches
          <th></th>
          // <th>Status</th>
        </tr>
      </thead>
      <tbody>
        // To prevent Google auto-fill for listener_username and listener_password, create hidden dummy inputs
        <input type="text" name="fake-user" style="display:none;">
        <input type="password" name="fake-pass" style="display:none;">

        for _, entry := range config {
          <tr>
            <td>
              <div class="tooltip">
                { entry.Key }
                <span class="tooltip-text">{ entry.Description }</span>
              </div>
            </td>
            <td>
              if entry.Type == "bool" {
                <div class="checkbox-wrapper">
                  <input
                    type="checkbox"
                    id={ "config-" + entry.Key }
                    name={ entry.Key }
                    checked?={ entry.Value == "true" }
                    data-config-key={ entry.Key }
                    data-config-type={ entry.Type }
                    class="config-input"
                    onchange="handleConfigChange(this)"
                  />
                  <label for={ "config-" + entry.Key }></label>
                </div>
              } else if entry.Type == "int" {
                <input
                  type="number"
                  id={ "config-" + entry.Key }
                  name={ entry.Key }
                  value={ entry.Value }
                  data-config-key={ entry.Key }
                  data-config-type={ entry.Type }
                  class="config-input"
                  onblur="handleConfigChange(this)"
                  onkeydown="if(event.key === 'Enter') handleConfigChange(this)"
                />
              } else if entry.Type == "password" {
                <a href="/config/update/password">Update</a>
              } else if entry.Type == "string" && len(entry.Value) > 50 {
                <textarea
                  id={ "config-" + entry.Key }
                  name={ entry.Key }
                  data-config-key={ entry.Key }
                  data-config-type={ entry.Type }
                  class="config-input"
                  onblur="handleConfigChange(this)"
                  onkeydown="if (event.key === 'Enter') handleConfigChange(this)">
                  { entry.Value }
                </textarea>
              } else {
                <input
                  type="text"
                  autocomplete="off"
                  id={ "config-" + entry.Key }
                  name={ entry.Key }
                  value={ entry.Value }
                  data-config-key={ entry.Key }
                  data-config-type={ entry.Type }
                  class="config-input"
                  onblur="handleConfigChange(this)"
                  onkeydown="if (event.key === 'Enter') handleConfigChange(this)"
                />
              }
            </td>
            <td>{ entry.UpdatedAt }</td>
            <td>
              <span id={ "status-" + entry.Key } class="status-indicator"></span>
            </td>
          </tr>
        }
      </tbody>
    </table>

    <script>
      // Debounce function to prevent too many requests
      function debounce(func, wait) {
        let timeout;
        return function(...args) {
          const context = this;
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(context, args), wait);
        };
      }
      
      // Handler for config changes
      function handleConfigChange(element) {
        const key = element.getAttribute('data-config-key');
        const type = element.getAttribute('data-config-type');
        let value;
        
        // Handle different input types
        if (element.type === 'checkbox') {
          value = element.checked ? "true" : "false";
        } else {
          value = element.value;
        }
        
        // Update status indicator to "saving"
        const statusIndicator = document.getElementById('status-' + key);
        statusIndicator.className = 'status-indicator status-saving';
        
        saveConfig(key, value, type, statusIndicator);
      }
      
      // Debounced save function for text inputs
      const debouncedSaveConfig = debounce(saveConfig, 500);
      
      function saveConfig(key, value, type, statusIndicator) {
        // console.log(JSON.stringify({
        //   key: key,
        //   value: value,
        //   type: type
        // }))

        // Send request to update config
        fetch('/config/update', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            key: key,
            value: value,
            type: type
          })
        })
        .then(response => response.json())
        .then(data => {
          // console.log(data);
          if (data.success) {
            // Show success indicator
            statusIndicator.className = 'status-indicator status-success';
            
            // If the server returned an updated timestamp, update it in the UI
            if (data.updatedAt) {
              const row = statusIndicator.closest('tr');
              const timestampCell = row.querySelector('td:nth-child(3)');
              if (timestampCell) {
                timestampCell.textContent = data.updatedAt;
              }
            }
          } else {
            // Show error indicator
            statusIndicator.className = 'status-indicator status-error';
            statusIndicator.title = data.error || 'Failed to update';
            console.error('Error updating config:', data.error);
          }
        })
        .catch(error => {
          // Show error indicator
          statusIndicator.className = 'status-indicator status-error';
          statusIndicator.title = 'Network error';
          console.error('Network error:', error);
        });
      }
    </script>
  }
}