// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"strings"

	"github.com/mjefferson-whs/listener/internal/data"
	"github.com/mjefferson-whs/listener/ui/components"
)

// Returns a string with the structure "param=val&param=val" for every filter present in filters.
// TODO: Make this agnostic and globally available, so that filters are automatically determined based on keys in data.Filters
func constructParams(filters data.Filters) string {
	fmt.Printf("filters: %v\n\n", filters.LogFilters.Level)

	vals := []string{}

	if len(filters.LogFilters.Level) > 0 {
		for _, val := range filters.LogFilters.Level {
			vals = append(vals, fmt.Sprintf("level=%v", val))
		}
	}

	if len(filters.LogFilters.UserID) > 0 {
		for _, val := range filters.LogFilters.UserID {
			vals = append(vals, fmt.Sprintf("userid=%v", val))
		}
	}

	if len(vals) > 0 {
		fmt.Printf("params: %v\n", "&"+strings.Join(vals, "&"))
		return "&" + strings.Join(vals, "&")
	} else {
		fmt.Println("no params")
		return ""
	}
}

// func constructURLWithParams(filters data.Filters, metadata data.Metadata) string {
//   vals := []string{}

//   if metadata.CurrentPage > 1 {
//     vals = append(vals, fmt.Sprintf("page=%v", metadata.CurrentPage))
//   }

//   if len(filters.LogFilters.Level) > 0 {
//     for _, val := range filters.LogFilters.Level {
//       vals = append(vals, fmt.Sprintf("level=%v", val))
//     }
//   }

//   if len(filters.LogFilters.UserID) > 0 {
//     for _, val := range filters.LogFilters.Level {
//       vals = append(vals, fmt.Sprintf("userid=%v", val))
//     }
//   }

//	  if len(vals) > 0 {
//	    return "/logs?"+strings.Join(vals, "&")
//	  } else {
//	    return "/logs"
//	  }
//	}
func LogsPage(logs []*data.Log, metadata data.Metadata, logsMetadata *data.LogsMetadata, filters data.Filters) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<h2>Logs Page</h2>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.LogMetadata(metadata).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "  ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.LogFilters(logsMetadata, filters).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.LogList(logs).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "  ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.PageNavigationControls("logs", constructParams(filters), metadata).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Authenticated().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// templ LogsPage(logs []*data.Log, metadata data.Metadata, logsMetadata *data.LogsMetadata) {
//   @Authenticated() {
//     <h2>Logs Page</h2>

//     @components.LogFilters(logsMetadata)

//	    @components.LogsContainer(logs, metadata)
//	  }
//	}
var _ = templruntime.GeneratedTemplate
