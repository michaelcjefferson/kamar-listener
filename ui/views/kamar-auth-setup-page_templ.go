// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/mjefferson-whs/listener/internal/data"

func KamarAuthSetupPage(u *data.User) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<h2>Before continuing, please set a username and password that you will use to authenticate with KAMAR.</h2><h3>This should be different to the username and password you used to log in to this service.</h3><h3>You will need to input this username and password into KAMAR itself when you set up the directory service. You can update it later if necessary.</h3><form id=\"kamar-auth-form\"><label for=\"username\">Username:</label> <input type=\"text\" id=\"username\" name=\"username\" required><br><label for=\"password\">Password:</label> <input type=\"password\" id=\"password\" name=\"password\" required> <label for=\"confirm-password\">Confirm Password:</label> <input type=\"password\" id=\"confirm-password\" name=\"confirm-password\" required><br><button type=\"submit\">Set KAMAR Auth</button></form><div id=\"error-container\"><p id=\"message\"></p></div><script>\n      document.getElementById(\"kamar-auth-form\").addEventListener(\"submit\", async function(event) {\n        event.preventDefault(); // Prevent default form submission\n\n        const username = document.getElementById(\"username\").value;\n        const password = document.getElementById(\"password\").value;\n        const confirmPassword = document.getElementById(\"confirm-password\").value;\n        if (password !== confirmPassword) {\n          document.getElementById(\"message\").textContent = \"Passwords don't match - try again.\";\n          return;\n        }\n\n        const res = await fetch(\"/config/set/auth\", {\n          method: \"POST\",\n          headers: {\n              \"Content-Type\": \"application/json\",\n              \"Accept\": \"application/json\"\n          },\n          body: JSON.stringify({ username, password })\n        });\n\n        if (res.redirected) {\n          // Get the redirect URL from the Location header\n          let redirectUrl = res.url;\n          // Redirect the user manually\n          window.location.href = redirectUrl;\n          return;\n        }\n\n        let j = await res.json();\n\n        // Check if response is OK (status 200-299)\n        if (res.ok) {\n          console.log('Successfully set KAMAR auth.');\n        } else {\n          // If it's not a redirect or successful response, check for JSON error\n          console.error('Error:', j.error);\n          // TODO: Convert to templ component which is retrieved via HTMX\n          if (typeof j.error === \"string\") {\n            document.getElementById(\"message\").textContent = j.error;\n          }\n          if (typeof j.error === \"object\") {\n            const errorContainer = document.getElementById(\"error-container\");\n            errorContainer.innerHTML = \"<ul class='error-list'></ul>\";\n            const ul = errorContainer.querySelector(\"ul\");\n\n            Object.entries(j.error).forEach(([key, value]) => {\n                const li = document.createElement(\"li\");\n                li.innerHTML = `<span class=\"error-text\">${key}</span>: ${value}`;\n                ul.appendChild(li);\n            });\n          }\n          // alert('Login failed: ' + j.error);\n        }\n        if (j.redirect) {\n          window.location.href = j.redirect;\n        }\n\n        // if (response.ok) {\n        //   window.location.href = redirectString; // Redirect to appropriate page\n        // } else {\n        //   const errorMessage = await response.text();\n        //   document.getElementById(\"message\").textContent = errorMessage;\n        // }\n      });\n    </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = Authenticated(u).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
