package views

import (
  "github.com/mjefferson-whs/listener/internal/data"
)

// TODO: Combine with UpdateListenerPasswordPage
templ UpdateUserPasswordPage(u *data.User) {
  @Authenticated(u) {
    if u == nil {
      <h2>User can't be identified - make sure you're logged in</h2>
    } else {
      <h2>Update { u.Username }'s Password</h2>

      <form id="update-password-form">
      <label for="current-password">Current Password:</label>
      // TODO: Add "required" to <input> again once initial config set-up by client has been implemented
      <input type="password" id="current-password" name="current-password" required>
      <br>
      <label for="new-password">New Password:</label>
      <input type="password" id="new-password" name="new-password" required>
      <label for="confirm-password">Confirm Password:</label>
      <input type="password" id="confirm-password" name="confirm-password" required>
      <br>
      <button type="submit">Update Password</button>
    </form>
    }

    <div id="error-container">
      <p id="message"></p>
    </div>

    <script>
      document.getElementById("update-password-form").addEventListener("submit", async function(event) {
        event.preventDefault(); // Prevent default form submission

        // let redirectString = "/";

        const currentPassword = document.getElementById("current-password").value;
        const newPassword = document.getElementById("new-password").value;
        const confirmPassword = document.getElementById("confirm-password").value;
        if (newPassword !== confirmPassword) {
          document.getElementById("message").textContent = "New password doesn't match confirmation password - try again.";
          return;
        }

        const res = await fetch("/users/update/password", {
          method: "POST",
          headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
          },
          body: JSON.stringify({ "current_password": currentPassword, "new_password": newPassword })
        });

        if (res.redirected) {
          // Get the redirect URL from the Location header
          let redirectUrl = res.url;
          // Redirect the user manually
          window.location.href = redirectUrl;
          return;
        }

        let j = await res.json();

        // Check if response is OK (status 200-299)
        if (res.ok) {
          document.getElementById("message").textContent = "Listener password has been successfully updated - make sure it has also been updated on KAMAR.";
          console.log('Listener password successfully changed.');
        } else {
          // If it's not a redirect or successful response, check for JSON error
          console.error('Error:', j.error);
          // TODO: Convert to templ component which is retrieved via HTMX
          if (typeof j.error === "string") {
            document.getElementById("message").textContent = j.error;
          }
          // TODO: Only works for first error response
          if (typeof j.error === "object") {
            const errorContainer = document.getElementById("error-container");
            errorContainer.innerHTML = "<ul class='error-list'></ul>";
            const ul = errorContainer.querySelector("ul");

            Object.entries(j.error).forEach(([key, value]) => {
                const li = document.createElement("li");
                li.textContent = `${key}: ${value}`;
                ul.appendChild(li);
            });
          }
        }
        if (j.redirect) {
          window.location.href = j.redirect;
        }
      });
    </script>
  }
}