// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func AuthForm(newUser bool) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<form id=\"auth-form\"><label for=\"username\">Username:</label> <input type=\"text\" id=\"username\" name=\"username\" required><br><label for=\"password\">Password:</label> <input type=\"password\" id=\"password\" name=\"password\" required> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if newUser {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<label for=\"confirm-password\">Confirm Password:</label> <input type=\"password\" id=\"confirm-password\" name=\"confirm-password\"><br><button type=\"submit\">Register</button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<button type=\"submit\">Sign In</button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</form><div id=\"error-container\"><p id=\"message\"></p></div><script>\n    document.getElementById(\"auth-form\").addEventListener(\"submit\", async function(event) {\n      event.preventDefault(); // Prevent default form submission\n\n      let urlString;\n      let redirectString = \"/\";\n\n      const username = document.getElementById(\"username\").value;\n      const password = document.getElementById(\"password\").value;\n      // If #confirm-password exists, get its value, otherwise set to \"\"\n      const confirmPassword = document.getElementById(\"confirm-password\")?.value || \"\";\n      if (confirmPassword) {\n        if (password !== confirmPassword) {\n          document.getElementById(\"message\").textContent = \"Passwords don't match - try again.\";\n          return;\n        }\n        urlString = \"/register\";\n      } else {\n        urlString = \"/sign-in\"\n      }\n\n      const res = await fetch(urlString, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        },\n        body: JSON.stringify({ username, password })\n      });\n\n      if (res.redirected) {\n        // Get the redirect URL from the Location header\n        let redirectUrl = res.url;\n        // Redirect the user manually\n        window.location.href = redirectUrl;\n        return;\n      }\n\n      let j = await res.json();\n\n      // Check if response is OK (status 200-299)\n      if (res.ok) {\n        console.log('Successfully logged in.');\n      } else {\n        // If it's not a redirect or successful response, check for JSON error\n        console.error('Login error:', j.error);\n        // TODO: Convert to templ component which is retrieved via HTMX\n        if (typeof j.error === \"string\") {\n          document.getElementById(\"message\").textContent = j.error;\n        }\n        if (typeof j.error === \"object\") {\n          const errorContainer = document.getElementById(\"error-container\");\n          errorContainer.innerHTML = \"<ul class='error-list'></ul>\";\n          const ul = errorContainer.querySelector(\"ul\");\n\n          Object.entries(j.error).forEach(([key, value]) => {\n              const li = document.createElement(\"li\");\n              li.innerHTML = `<span class=\"error-text\">${key}</span>: ${value}`;\n              ul.appendChild(li);\n          });\n        }\n        // alert('Login failed: ' + j.error);\n      }\n      if (j.redirect) {\n        window.location.href = j.redirect;\n      }\n\n      // if (response.ok) {\n      //   window.location.href = redirectString; // Redirect to appropriate page\n      // } else {\n      //   const errorMessage = await response.text();\n      //   document.getElementById(\"message\").textContent = errorMessage;\n      // }\n    });\n  </script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
